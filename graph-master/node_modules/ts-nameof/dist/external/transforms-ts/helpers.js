"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = __importStar(require("typescript"));
var common_1 = require("./external/common");
function isNegativeNumericLiteral(node) {
    if (!ts.isPrefixUnaryExpression(node))
        return false;
    return node.operator === ts.SyntaxKind.MinusToken
        && ts.isNumericLiteral(node.operand);
}
exports.isNegativeNumericLiteral = isNegativeNumericLiteral;
function getNegativeNumericLiteralValue(node) {
    if (node.operator !== ts.SyntaxKind.MinusToken || !ts.isNumericLiteral(node.operand))
        return common_1.throwError("The passed in PrefixUnaryExpression must be for a negative numeric literal.");
    var result = parseFloat(node.operand.text);
    if (isNaN(result))
        return common_1.throwError("Unable to parse negative numeric literal: " + node.operand.text);
    return result * -1;
}
exports.getNegativeNumericLiteralValue = getNegativeNumericLiteralValue;
function getReturnStatementExpressionFromBlock(block) {
    for (var _i = 0, _a = block.statements; _i < _a.length; _i++) {
        var statement = _a[_i];
        if (ts.isReturnStatement(statement) && statement.expression != null)
            return statement.expression;
    }
    return undefined;
}
exports.getReturnStatementExpressionFromBlock = getReturnStatementExpressionFromBlock;
