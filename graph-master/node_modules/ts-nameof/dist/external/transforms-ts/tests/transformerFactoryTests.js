"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = __importStar(require("typescript"));
var tests_common_1 = require("../external/tests-common");
var transformerFactory_1 = require("../transformerFactory");
tests_common_1.runCommonTests(run);
function run(text) {
    var results = [];
    var compilerOptions = {
        strictNullChecks: true,
        target: ts.ScriptTarget.ES2017
    };
    var transformers = {
        before: [transformerFactory_1.transformerFactory],
        after: []
    };
    var testFileName = "/file.ts";
    var host = {
        fileExists: function (fileName) { return fileName === testFileName; },
        readFile: function (fileName) { return fileName === testFileName ? text : undefined; },
        getSourceFile: function (fileName, languageVersion) {
            if (fileName !== testFileName)
                return undefined;
            return ts.createSourceFile(fileName, text, languageVersion, false, ts.ScriptKind.TS);
        },
        getDefaultLibFileName: function (options) { return ts.getDefaultLibFileName(options); },
        writeFile: function () { throw new Error("Not implemented"); },
        getCurrentDirectory: function () { return "/"; },
        getDirectories: function () { return []; },
        getCanonicalFileName: function (fileName) { return fileName; },
        useCaseSensitiveFileNames: function () { return true; },
        getNewLine: function () { return "\n"; }
    };
    var program = ts.createProgram(["/file.ts"], compilerOptions, host);
    program.emit(undefined, function (fileName, fileText) { return results.push({ fileName: fileName, fileText: fileText }); }, undefined, false, transformers);
    return results[0].fileText;
}
