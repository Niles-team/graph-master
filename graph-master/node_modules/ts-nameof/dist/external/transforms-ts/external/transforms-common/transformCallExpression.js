"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("./external/common");
var node_factories_1 = require("./node-factories");
var printers_1 = require("./printers");
var getNodePartTexts_1 = require("./getNodePartTexts");
function transformCallExpression(callExpr) {
    if (callExpr.property == null)
        return node_factories_1.createStringLiteralNode(handleNameof(callExpr));
    if (callExpr.property === "full")
        return node_factories_1.createStringLiteralNode(handleNameofFull(callExpr));
    if (callExpr.property === "toArray")
        return node_factories_1.createArrayLiteralNode(handleNameofToArray(callExpr));
    return common_1.throwError("Unsupported nameof call expression with property '" + callExpr.property + "': " + printers_1.printCallExpression(callExpr));
}
exports.transformCallExpression = transformCallExpression;
function handleNameof(callExpr) {
    return getNodePartTexts_1.getLastNodePartText(getExpression());
    function getExpression() {
        if (callExpr.arguments.length === 1)
            return callExpr.arguments[0];
        else if (callExpr.typeArguments.length === 1)
            return callExpr.typeArguments[0];
        return common_1.throwError("Call expression must have one argument or type argument: " + printers_1.printCallExpression(callExpr));
    }
}
function handleNameofFull(callExpr) {
    var exprAndCount = getExpressionAndCount();
    return getPartsAsString(getNodePartTexts_1.getNodePartTexts(exprAndCount.expression), getCount(exprAndCount.count));
    function getExpressionAndCount() {
        if (shouldUseArguments())
            return { expression: callExpr.arguments[0], count: callExpr.arguments.length > 1 ? callExpr.arguments[1] : undefined };
        if (callExpr.typeArguments.length > 0)
            return { expression: callExpr.typeArguments[0], count: callExpr.arguments.length > 0 ? callExpr.arguments[0] : undefined };
        return common_1.throwError("Unsupported use of nameof.full: " + printers_1.printCallExpression(callExpr));
        function shouldUseArguments() {
            if (callExpr.arguments.length === 0)
                return false;
            if (callExpr.typeArguments.length === 0)
                return true;
            return callExpr.arguments[0].kind === "Function";
        }
    }
    function getPartsAsString(parts, count) {
        return getSubParts().join(".");
        function getSubParts() {
            if (count > 0) {
                if (count > parts.length - 1)
                    return common_1.throwError("Count of " + count + " was larger than max count of " + (parts.length - 1) + ": " + printers_1.printCallExpression(callExpr));
                return parts.slice(count);
            }
            if (count < 0) {
                if (Math.abs(count) > parts.length)
                    return common_1.throwError("Count of " + count + " was larger than max count of " + parts.length * -1 + ": " + printers_1.printCallExpression(callExpr));
                return parts.slice(parts.length + count);
            }
            return parts;
        }
    }
    function getCount(countExpr) {
        if (countExpr == null)
            return 0;
        if (countExpr.kind !== "NumericLiteral")
            return common_1.throwError("Expected count to be a number, but was: " + printers_1.printNode(countExpr));
        return countExpr.value;
    }
}
function handleNameofToArray(callExpr) {
    var arrayArguments = getNodeArray();
    return arrayArguments.map(function (element) { return convertToStringLiteralNode(element); });
    function getNodeArray() {
        if (callExpr.arguments.length === 0)
            return common_1.throwError("Unable to parse call expression, no arguments provided: " + printers_1.printCallExpression(callExpr));
        var firstArgument = callExpr.arguments[0];
        if (callExpr.arguments.length === 1 && firstArgument.kind === "Function") {
            var functionReturnValue = firstArgument.value;
            if (functionReturnValue == null || functionReturnValue.kind !== "ArrayLiteral")
                return common_1.throwError("Unsupported toArray call expression, an array must be returned by the provided function: " + printers_1.printCallExpression(callExpr));
            return functionReturnValue.elements;
        }
        else {
            return callExpr.arguments;
        }
    }
    function convertToStringLiteralNode(element) {
        var stringElement = getNodePartTexts_1.getLastNodePartText(element);
        return node_factories_1.createStringLiteralNode(stringElement);
    }
}
