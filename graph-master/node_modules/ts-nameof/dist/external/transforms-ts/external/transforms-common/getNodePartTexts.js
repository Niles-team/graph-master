"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("./external/common");
var printers_1 = require("./printers");
function getLastNodePartText(node) {
    var lastPart = getNodeParts(node).pop();
    if (lastPart == null)
        return common_1.throwError("Could not resolve the last node part for: " + printers_1.printNode(node));
    if (typeof lastPart === "string")
        return lastPart;
    return common_1.throwError("The node `" + printers_1.printNode(lastPart) + "` is not supported in this scenario.");
}
exports.getLastNodePartText = getLastNodePartText;
function getNodePartTexts(node) {
    var parts = getNodeParts(node);
    ensureStringArray();
    return parts;
    function ensureStringArray() {
        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            if (typeof part !== "string")
                return common_1.throwError("The node `" + printers_1.printNode(part) + "` is not supported in this scenario.");
        }
    }
}
exports.getNodePartTexts = getNodePartTexts;
function getNodeParts(initialNode) {
    return getStringArray(initialNode, undefined);
    function getStringArray(node, parent) {
        var result = [];
        while (node != null) {
            if (node.kind === "Computed") {
                var text = "[" + getStringArray(node.value, node).join(".") + "]";
                if (result.length === 0)
                    result.push(text);
                else if (typeof result[result.length - 1] !== "string")
                    return common_1.throwError("Unsupported node before a computed property: " + printers_1.printNode(result[result.length - 1]));
                else
                    result[result.length - 1] += text;
            }
            else if (node.kind === "Function") {
                if (parent != null)
                    return common_1.throwError("Nesting functions is not supported: " + printers_1.printNode(node));
                var firstNode = node.value;
                if (firstNode.next == null)
                    return common_1.throwError("A property must be accessed on the object: " + printers_1.printNode(node));
                if (firstNode.next.kind === "Computed")
                    return common_1.throwError("First accessed property must not be computed: " + printers_1.printNode(node));
                result.push.apply(result, getStringArray(firstNode.next, undefined));
            }
            else if (node.kind === "StringLiteral" && parent != null && parent.kind === "Computed" && result.length === 0)
                result.push("\"" + node.value + "\"");
            else if (node.kind === "ArrayLiteral" || node.kind === "ImportType")
                result.push(node);
            else
                result.push(node.value.toString());
            node = node.next;
        }
        return result;
    }
}
