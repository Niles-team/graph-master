"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var getFileNamesFromGlobs_1 = require("./getFileNamesFromGlobs");
var replaceInText_1 = require("./replaceInText");
function replaceInFiles(fileNames, optsOrOnFinished, onFinishedParam) {
    var opts = { encoding: "utf8" };
    var onFinished;
    if (optsOrOnFinished instanceof Function)
        onFinished = optsOrOnFinished;
    else if (onFinishedParam instanceof Function)
        onFinished = onFinishedParam;
    else
        onFinished = function () { };
    if (optsOrOnFinished && !(optsOrOnFinished instanceof Function))
        opts.encoding = optsOrOnFinished.encoding || opts.encoding;
    getFileNamesFromGlobs_1.getFileNamesFromGlobs(fileNames).then(function (globbedFileNames) { return doReplaceInFiles(globbedFileNames, opts.encoding); }).then(function () {
        onFinished();
    }).catch(function (err) {
        onFinished(err);
    });
}
exports.replaceInFiles = replaceInFiles;
function doReplaceInFiles(fileNames, encoding) {
    var promises = [];
    fileNames.forEach(function (fileName) {
        promises.push(new Promise(function (resolve, reject) {
            fs.readFile(fileName, { encoding: encoding }, function (err, fileText) {
                if (err) {
                    reject(err);
                    return;
                }
                var result = replaceInText_1.replaceInText(fileName, fileText);
                if (result.replaced) {
                    fs.writeFile(fileName, result.fileText, function (writeErr) {
                        if (writeErr) {
                            reject(writeErr);
                            return;
                        }
                        resolve();
                    });
                }
                else {
                    resolve();
                }
            });
        }));
    });
    return Promise.all(promises);
}
